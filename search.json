[{"title":"博客使用教程","url":"//p/2c8c69a937de415b800d862815a70f0f/","content":"\n---\n\n## title: 博客使用教程&#xA;date: 2021-10-29 17:15:10&#xA;tags: \\[blog]\n\n# 前言\n\n本来想要使用 Gitbook 作为新的博客系统的，但是在线的笔记本对于周二突然间搬瓦工服务器抖动了一下，导致笔记本内容丢失的问题，太过于致命了。\n\n但是如果满足我的需求的笔记本还是没找到，我就写在这里吧。\n\n1. 复制插入图片\n2. markdown 编辑\n3. Git 管理\n4. 有博客发表的需求\n5. 多机协作\n6. 可以快速搜索到关键词\n\n截止到我开始写这篇博客时，我采用了一个临时的方案，即 typora 复制插入图片 + github/gitlab 等官方/私人 git 管理 + hexo 博客发表，但是这套方案无法在博客页面上快速搜索关键词。所以，就需要在 github 页面上去搜索关键词。\n\n# 使用教程\n\n1. 进入 GitHub[页面](https://github.com/zhongqian97/zhongqian97.github.io)，左上角的搜索框搜索即可。\n2. 中文搜索需要全部关键词输入后才能搜索到页面。\n\n![image-20211029175357970](/resource/53ea86c57d5f44cab5bec53e02af2609.png)\n\n![image-20211029175357970](./image-20211029175357970.png)\n"},{"title":"触发器的使用","url":"//p/9655b77cf21245879bfd47f24c443a5e/","content":"\n---\n\n## title: 触发器的使用&#xA;date: 2021-10-29 15:59:16&#xA;tags: \\[UE4 蓝图]\n\n# 参考资料\n\n- [【虚幻 4】UE4 初学者系列教程合集-全中文新手入门教程](https://www.bilibili.com/video/BV164411Y732)\n\n# 蓝图类\n\n## 通过关卡蓝图来开关门\n\n![image-20211030203418992](/resource/6636ecfd162b4a5db444c36ecb88556b.png)\n\n![image-20211030203418992](./image-20211030203418992.png)\n\n![image-20211030202846671](/resource/315cccd1b6eb4a86b321f4a661247bda.png)\n\n![image-20211030202846671](./image-20211030202846671.png)\n\n### 思路\n\n- 进入触发器时控制 Door 这个静态网格体相对旋转，通过时间轴制造一个开门动画。\n- 时间轴从（0，0）到（0，85），第一个值为秒数，第二个值为图中新建轨道 0 的输出值。\n\n## 通过自定义蓝图类来实现按键 E 开关门\n\n![image-20211030204046375](/resource/0f7cbd10874e43e18f250856f0e7d27f.png)\n\n![image-20211030204046375](./image-20211030204046375.png)\n\n### 思路\n\n- 当玩家进入控制器时，触发启动输入；离开控制器，禁用输入\n- 当启动输入后，通过按下 E 键，控制 Gate\n- Flip Flop 组件为每一次走流程都走与上一次相反的路径，通过每次按 E 键都有与上一次不同的效果（按一次 E 开门，再按一次关门）\n"},{"title":"谷歌随机引擎","url":"//p/d46afca1aa2542f5bf0d5694b59d19bf/","content":"\n---\n\n## title: 谷歌随机引擎&#xA;date: 2021-04-26 16:13:21&#xA;tags:\n\n# 动机\n\n- 最近谷歌不知道是抽什么风，无论我用了多好的 VPS 搭建 v2ray 都不管用，时不时就是一个搜索抽了，烦得一批，索性就把这个问题用最低成本解决了。\n\n# 为什么说是最低成本\n\n- 其实这个问题我认为有两个解决方案：\n- 1、使用一个在线脚本去同时 get 多个域名，最快的返回给我，但是这个有点吃流量（虽然也没吃多少），而且需要先到在线脚本网站过一遍才行。会有延迟。\n- 2、在谷歌浏览器的加持下，更改默认搜索引擎可以植入 js！这也是我的方案，随机一个域名，如果有一个域名炸了也只是其中一个而已，所以我准备了 7 个域名。\n- 分别是：香港，台湾，日本，韩国，新加坡，com 主域名（应该是在美国吧），马来西亚（还是澳大利亚忘了）。\n\n# 我的方案的前置知识\n\n- 首先要有谷歌浏览器，其他浏览器我也不知道能不能行。\n- chrome://settings/searchEngines?search=%E5%BC%95%E6%93%8E\n- 其他搜索引擎 -》 添加 -》 搜索引擎名称 and 关键字（自己命名）-》 网址格式（这个复制我的 js 脚本内容）-》添加\n- 找到你命名的搜索引擎名称 -》 更多操作（那是三个冒号，在右边） -》设为默认选项\n- 测试一下\n\n# js 脚本内容\n\n```\njavascript:location.href=\"https://\" + ['google.com', 'google.co.jp', 'google.com.hk', 'google.com.tw', 'google.co.kr', 'google.com.sg', 'google.com.au'][Math.floor((Math.random()*7))] + \"/search?q=%s\"\n```\n\n# 结论\n\n- 我也不知道写啥，就这样吧，溜了溜了，最近更新工具肯定比之前多了就是了\n"},{"title":"我的AllInOne服务器之外部代理服务器篇","url":"//p/febc687764f248a5ad30c76ad7b2b6c4/","content":"\n---\n\n## title: 我的 AllInOne 服务器之外部代理服务器篇&#xA;date: 2021-02-16 22:09:43&#xA;tags: \\[AllInOne 服务器]\n\n# 开篇唠唠嗑\n\n最近有空就在谋划着 AllInOne 这个事情，讲道理这个概念我也是知道不久，但刚好符合我的需求，私密使用 docker 搭建 wiz，nextcloud，gitlab，bark，aria2 等等，这应该算是我的兴趣爱好吧。。。下面的这些工具都是非常简单的说明了我怎么用，并没有教程啥的，所以如果想学的话我可以说下这些工具的作用，但你自己要找下教程去学。\n\n- 第一个是 bbr，这个是一个让境外服务器的连接体验变好的工具，如果你的服务器在国外可以去使用这个。我呢是拿它优化一下网络，但别指望它能怎样，比不优化要好一些，我用的是 bbr plus，不同服务器最好都测试一下其他的方法，万一有更好用的呢？\n- 第二个是 v2ray，百度一下吧。\n- 第三个是 caddy，让 http 加个 s。这个挺好用的，配置也简单。证书到期可以自动“续费”。我是拿来外部 http 连接上个 s。比如说 bark 程序加个 s。\n- 第四个是 acme.sh，跟第三个差不多，不过我是拿来内部 frp 连接时候加一个 s。\n- 第五个是 frp，内网穿透专用，不熟悉这个概念百度一下。AllInOne 灵魂，没有这个的 AllInOne 就是一个 Nas + 软路由。\n- 第六个 bark，就是一个 iPhone 上的信息提醒软件，通过 http 的 get 方法可以实时发送信息到 iphone 上，配合 RSS 可以实时检测你想要的信息流。自定义 RSS 还可以拿来抢某些优惠券等等。安卓的用户可以使用 Server 酱，我也在用。我目前拿这个来每小时检测我的内网 AllInOne 服务器是否正常使用。一旦断网或者死机了能提醒一下。\n- 第七个就是 Linux 上的 crontab，定时运行程序，配合 bark 做监控服务器是否正常使用。\n\n# bbr\n\n```\nwget -N --no-check-certificate \"https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh\"\nchmod +x tcp.sh\n./tcp.sh\n```\n\n# install v2ray\n\n```\nbash <(curl -s -L https://git.io/v2ray.sh)\n```\n\n# install caddy\n\n```\nsudo apt install -y debian-keyring debian-archive-keyring apt-transport-https\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/cfg/gpg/gpg.155B6D79CA56EA34.key' | sudo apt-key add -\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/cfg/setup/config.deb.txt?distro=debian&version=any-version' | tee -a /etc/apt/sources.list.d/caddy-stable.list\napt update && apt install -y caddy\n```\n\n## nano /etc/caddy/Caddyfile\n\n```\n{\n    email root@example.com\n}\nexample.com {\n  reverse_proxy 127.0.0.1:80\n}\n```\n\n# acme.sh(aliyun)\n\n```\ncurl  https://get.acme.sh | sh\nexport Ali_Key=\"\"\nexport Ali_Secret=\"\"\n.acme.sh/acme.sh --issue --dns dns_ali -d example.com\n```\n\n# frp\n\n```\n# https://github.com/fatedier/frp/releases\n# bash shell\n# Server\n./frps -c ./frps.ini &\ndisown %1\n# Client\n./frpc -c ./frpc.ini &\ndisown %1\n```\n\n## frps.ini\n\n```\n[common]\nbind_port =7000\nbind_udp_port =7000\ntls_only = true\ntls_enable = true\ntls_cert_file = /root/.acme.sh/example.com/example.com.cer\ntls_key_file = /root/.acme.sh/example.com/example.com.key\ntls_trusted_ca_file = /root/.acme.sh/example.com/ca.cer\n```\n\n## frpc.ini\n\n```\n[common]\nserver_addr = example.com\nserver_port = 7000\ntls_enable = true\ntls_cert_file = ./example.com/example.com.cer\ntls_key_file = ./example.com/example.com.key\ntls_trusted_ca_file = ./example.com/ca.cer\n\n[http]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 80\nremote_port = 8080\n```\n\n# bark\n\n```\n# install docker\ncurl -fsSL get.docker.com | sh\ndocker run -dt --name bark -p 8080:8080 finab/bark-server\n```\n\n# crontab\n\n```\n10 * * * * /usr/bin/python3  /root/ServerIsRunning.py\n```\n\n## ServerIsRunning.py\n\n```python\nimport requests, time\ndef send():\n    my_keys = ''\n    title = 'Hongkong Server is destroyed!'\n    body = 'Hongkong Server is destroyed!'\n    msg_url = \"https://bark.example.com/{}/{}/{}?sound=anticipate\".format(my_keys, title, body)\n    requests.get(msg_url)\n\ntry:\n    r = requests.get('https://example.com/')\n    time.sleep(5)\n    if (r.status_code != 200):\n        send()\nexcept Exception:\n    send()\n```\n"},{"title":"服务器日常跑实验命令","url":"//p/6c4a4c54eec147f8b796678e20b9b1e7/","content":"\n---\n\n## title: 服务器日常跑实验命令&#xA;date: 2021-01-13 10:50:21&#xA;tags:\n\n# 远程连接 SSH\n\n```shell\n# 注：端口号默认为22不需要写 :22\n# 第一种（最常用）\nssh 用户名@主机IP地址:端口号\n\n# 注：端口号默认为22不需要写 -p 了\n# 第二种（一般第一种不行时候使用） 有时候是小写-p，有时候是大写-P\nssh 用户名@主机IP地址 -p 端口号\n```\n\n# 与文件相关\n\n## 删除文件/文件夹\n\n```shell\nrm 文件名\n\nrm -rf 文件夹\n\n# 删除当前目录所有文件\nrm -rf ./*\n\n```\n\n## 远程传输文件/文件夹（走 SSH 通道） 一般千兆跑满能达到 130MB/S 跟普通移动硬盘差不多的速度\n\n```shell\n# 注：端口号默认为22不需要写22但是需要写冒号\n# 复制当前文件到远程用户家目录\nscp ./文件名 用户名@主机IP地址:端口号~/\n\n# 复制当前目录到远程用户家目录\nscp -r ./文件夹名 用户名@主机IP地址:端口号~/\n\n# 复制远程用户家目录下文件到当前文件夹下\nscp ./文件名 用户名@主机IP地址:端口号~/\n\n# 复制远程用户家目录下文件夹到当前目录\nscp -r 用户名@主机IP地址:端口号~/文件夹名 ./\n\n```\n\n# 与进程相关\n\n## 查看指定进程是否运行\n\n```shell\nps -aux | grep 进程名（可以是只有一部分）\n```\n\n## 结束所有进程\n\n```shell\nsudo pkill -9 进程名（可以是只有一部分）\n```\n"},{"title":"v2ray网络安全代理","url":"//p/0977f0c65ea544eab1c23c61fea910a2/","content":"\n---\n\n## title: v2ray 网络安全代理&#xA;date: 2019-10-08 19:28:31&#xA;tags: \\[bbr,v2ray,Shadowrocket,Caddy]\n\n# v2ray 网络安全代理:book:\n\n## 参考链接：\n\n- [基于 v2ray 的 websocket+tls+web 实现安全网络代理（一下子可能打不开）](https://www.conum.cn/share/191.html)\n\n或者直接复制打开\n\n```\nhttps://www.conum.cn/share/191.html\n```\n\n## 注意事项\n\n### 7、Caddyfile 配置\n\n- 这个文件位置在/etc/caddy/Caddyfile\n\n```\nroot@:~# touch /var/log/caddy/caddy.log\ntouch: cannot touch '/var/log/caddy/caddy.log': No such file or directory\nroot@:~# chown -R root:www-data /var/log/caddy/\nchown: cannot access '/var/log/caddy/': No such file or directory\n```\n\n- 解决方案\n\n```\nmkdir /var/log/caddy/\n```\n\n### 8、启动 Caddy 和 V2Ray\n\n- 如果 Caddy 启动失败时，除了你的 Caddyfile 有问题之外，还有下面这个解决方案。\n\n```\ncaddy -conf /etc/caddy/Caddyfile &\ndisown %1\n```\n\n- 第一句代码就是直接使用 caddy 　+　配置文件　＆　这个后台运行\n- 第二句是直接释放权限给系统。\n- 关闭语句如下：\n\n```\nps -aux | grep caddy\nkill 进程ID号码\n```\n\n### V2RayN 客户端\n\n- 这个客户端是没有 v2ray-core 的，需要在使用时安装或者提前安装。\n\n#### 链接\n\n- [v2ray-core 传送门](https://github.com/v2ray/v2ray-core/releases)\n- [v2rayN 传送门](https://github.com/2dust/v2rayN/releases)\n\n### bbr 一键安装脚本\n\n```\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh && chmod +x bbr.sh && ./bbr.sh\n```\n\n### IOS 客户端\n\n- 除了参考链接推荐那几个，还有一个可以使用。\n\n#### Shadowrocket（小火箭）\n\n- Vmess KCP 注意不支持。\n- 算法你随意（我的 aes-128-cfb）。\n- 打开 TLS。\n- 关闭允许不安全。\n\n##### 混淆为 websocket\n\n- 路径为 /v2ray\n"},{"title":"给http上锁工具———Caddy","url":"//p/258b1f87e0404333988d118172e3ce0c/","content":"\n---\n\n## title: 给 http 上锁工具———Caddy&#xA;date: 2019-10-13 23:18:56&#xA;tags: \\[Caddy]\n\n# 简介\n\n## http 是什么？\n\n- [菜鸟教程传送门](https://www.runoob.com/http/http-tutorial.html)\n\n> HTTP 是一个基于 TCP/IP 通信协议\n\n- 因为 http 在网络上传输是明文形式的，任何抓到这个传输文件的人都能看到这个包的内容，因此有了加密版 http-https\n\n## https 是什么？\n\n- [百度百科传送门](https://baike.baidu.com/item/https/285356?fr=aladdin)\n\n> HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer 或 Hypertext Transfer Protocol Secure，超文本传输安全协议），是以安全为目标的 HTTP 通道，简单讲是 HTTP 的安全版。即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。\n\n## 为何使用 https？\n\n- 通信使用明文，内容可能会被窃听；\n- 不验证通信方的身份，因此有可能遭遇伪装；（搜索：中间人攻击！）\n- 无法证明报文的完整性，有可能已遭篡改。(通信运营商的日常修改！！)\n\n## 回到最后，Caddy 是什么？\n\n> Caddy 是一个易于使用的通用 web 服务器。\n\n- 我的定义：Caddy 就是一个管理 https 的自动化工具。\n\n# 安装教程\n\n- [Caddy 中文文档](https://dengxiaolong.com/caddy/zh/)\n- [智在于行'S BLOG](https://www.conum.cn/share/191.html)\n\n## 安装与配置\n\n- 安装\n\n```\ncurl https://getcaddy.com | bash -s personal\n```\n\n- 配置\n\n```\nmkdir /etc/caddy\ntouch /etc/caddy/Caddyfile\nchown -R root:www-data /etc/caddy\nmkdir /etc/ssl/caddy\nchown -R www-data:root /etc/ssl/caddy\nchmod 0770 /etc/ssl/caddy\nmkdir /var/log/caddy/\ntouch /var/log/caddy/caddy.log\nchown -R root:www-data /var/log/caddy/\nchmod 777 /var/log/caddy/caddy.log\n```\n\n- 将 Caddy 配置成一个服务\n\n```\n# 从 github 下载 systemd 配置文件 sudo systemctl daemon-reload # 重新加载 systemd 配置\ncurl -s https://raw.githubusercontent.com/mholt/caddy/master/dist/init/linux-systemd/caddy.service -o /etc/systemd/system/caddy.service\n```\n\n- 打开 caddy.service 配置文件\n\n```\n# 打开caddy.service\nnano /etc/systemd/system/caddy.service\n# vim /etc/systemd/system/caddy.service\n```\n\n- 以下三项配置选项的注释符#删除，如下：\n\n```\nCapabilityBoundingSet=CAP_NET_BIND_SERVICE\nAmbientCapabilities=CAP_NET_BIND_SERVICE\nNoNewPrivileges=true\n```\n\n- 设置启动\n\n```\nsystemctl enable caddy.service # 设置 caddy 服务自启动\nsystemctl status caddy.service # 查看 caddy 状态\n```\n\n## 设置 Caddyfile（重要！！！）\n\n- [先看入门](https://dengxiaolong.com/caddy/zh/caddyfile.html)\n- [再看文档](https://dengxiaolong.com/caddy/zh/)\n\n## 启动(修改配置后重新第一次启动！)\n\n- 第一次启动\n\n```\ncaddy -conf /etc/caddy/Caddyfile\n```\n\n- 之后启动直接用以下方式：\n\n```\nsystemctl start caddy # 打开\nsystemctl status caddy # 查看状态\nsystemctl stop caddy # 停止\n```\n\n# 结语\n\n- 学习完这个，加上后面的 frp 反向代理结合有着更多的玩法哦！\n- Linux 不懂的建议先学习如何使用 Linux（最少 nano 要会吧）\n"},{"title":"MBTI职业性格测试","url":"//p/22168dd899484b48b91598a3c2ab0b51/","content":"\n---\n\n## title: MBTI 职业性格测试&#xA;date: 2019-10-12 21:50:03&#xA;tags: \\[MBTI,INTJ,心理学]\n\n# 什么是 MBTI？\n\n## 百度百科\n\n> MBTI 职业性格测试是国际最为流行的职业人格评估工具，作为一种对个性的判断和分析，是一个理论模型，从纷繁复杂的个性特征中，归纳提炼出 4 个关键要素——动力、信息收集、决策方式、生活方式，进行分析判断，从而把不同个性的人区别开来。\n\n# 能干嘛？\n\n- 认识自己\n- 理解他人\n\n# MBTI 理论基础\n\n- [MBTI 人格理论](https://wiki.mbalib.com/wiki/MBTI%E4%BA%BA%E6%A0%BC%E7%90%86%E8%AE%BA)\n- [才储介绍](https://www.apesk.com/mbtihd/mbti_all.html)\n\n# 测试网站？\n\n## 现场直接来？\n\n<iframe width=\"100%\" height=\"555px\" frameborder=\"0\" scrolling=\"no\" src=\"https://www.apesk.com/mbti/dati28N.asp\"></iframe>\n\n## 无敌传送门！\n\n- [传送门](https://www.apesk.com/mbti/dati.asp)\n"},{"title":"以前的页面","url":"//p/1fb96fc6b9d949a09a1df2f28a518489/","content":"\n---\n\n## title: 以前的页面&#xA;date: 2019-10-07 21:16:27&#xA;tags: \\[工具,书籍推荐,几分钟学新语言]\n\n# Amazon kindle books\n\n- <https://github.com/wbunle/PersonalShare>\n\n# 区块链\n\n- <https://github.com/maiiz/Blockchain_RD_Checklist>\n\n- 书籍：<https://yeasy.gitbooks.io/blockchain_guide/content/born/bitcoin.html>\n\n# 想几分钟学新语言？\n\n- <https://learnxinyminutes.com/>\n\n# Linux 入门教程\n\n- <http://billie66.github.io/TLCL/book/index.html>\n\n# Emacs\n\n## 交流社区\n\n- <https://emacs-china.org/>\n\n## 视频教程\n\n- <http://v.youku.com/v_show/id_XMTUwNjU0MjE0OA==.html>\n\n## lisp 教程\n\n- <http://smacs.github.io/elisp/>\n\n# 刷题记录\n\n- 本宝宝创建了 github 啦啦啦\n\n- <https://github.com/zhongqian97/Lintcode>\n\n# 我是有底线的\n\n- 做一个纯真的 emacser\n\n- 本网（ye）站（mian）创建于 2018-3-4 仲谦（Tim）\n"},{"title":"按键精灵-几乎零门槛的办公室自动化工具","url":"//p/b9cd429f9a824a9090fde49a643fcca7/","content":"\n---\n\n## title: 按键精灵-几乎零门槛的办公室自动化工具&#xA;date: 2019-10-16 13:51:08&#xA;tags: \\[按键精灵]\n\n# 前言\n\n- 大二过年的时候，闲着没事从按键精灵 1 级考到了 6 级，一级到三级都是基本上百度来的（概念），4-6 开始全是编程题目（过了 C 语言二级的人都能考过）。\n- 然而按键精灵可以直接入门就能开始录制使用。（考个锤子考）\n- 而且即使是编程，也是可视化的。（新手十分友好）\n\n# 入门教程\n\n- 其实也是按照传统软件的方式。[下载](http://res.91anjian.com/Pc/qm2014chs@1780_105.exe)。安装，然后使用。\n- 安装完软件之后可以直接打开软件（会有广告，正常现象，免费，不用破解）。\n\n## 录制脚本（新手入门）\n\n- 新建脚本\n- 空白带界面都行，我这里选空白。\n- 点击录制。（左上第 6 个按钮）\n- 建议修改热键为 F1，F2\n- 开始录制，录制完成后停止录制。\n- 保存（Ctrl + S）\n- 调试（F5）\n- 按 F10 启动，使用完成后 F12 关闭。\n\n# 其实到这里也差不多结束了（毕竟是新手教程）\n\n- 下载软件肯定被报告是病毒，不用管就是了。不信可以自己百度下载。\n- 下个按键精灵的就是带有一点编程的了。\n"},{"title":"RSS是什么？能干嘛？","url":"//p/b82d096d75cf4a7cb1ea690e3d4a130c/","content":"\n---\n\n## title: RSS 是什么？能干嘛？&#xA;date: 2019-10-11 12:14:05&#xA;tags: \\[RSS,ttrss,feed43,rsshub,miniflux,inoreader,feeder,unread]\n\n# RSS 学习是有门槛的。阅读者注意。\n\n# 是什么？\n\n## 一位大学老师的介绍：（视频）\n\n- [传送门](https://www.bilibili.com/video/av53306170?from=search&seid=4397539768243415833)\n\n## wiki 定义：\n\n- RSS（最初是 RDF 网站摘要；后来出现了两种相互竞争的方法，分别使用了反义词 Rich Site Summary 和 Really Simple Syndication）\\[2]是一种 Web feed \\[3]，允许用户和应用程序访问网站中的更新标准化的计算机可读格式。这些提要例如可以允许用户在单个新闻聚合器中跟踪许多不同的网站。新闻聚合器将自动检查 RSS 提要中是否有新内容，从而使内容可以自动从网站传递到网站或从网站传递给用户。内容的这种传递称为网络联合。网站通常使用 RSS feed 来发布经常更新的信息，例如博客条目，新闻标题或音频和视频系列剧集。RSS 还用于分发播客。RSS 文档（称为“提要”，“网络提要”，\\[4]或“频道”）包括完整或摘要的文本以及元数据，例如发布日期和作者姓名。\n\n- 标准的 XML 文件格式可确保与许多不同的机器/程序兼容。RSS feed 也使希望从喜爱的网站及时接收更新或从许多网站汇总数据的用户受益。\n\n- 订阅网站 RSS 使用户无需手动检查网站是否有新内容。取而代之的是，他们的浏览器会不断监视该站点，并通知用户任何更新。还可以命令浏览器为用户自动下载新数据。\n\n- RSS feed 数据使用称为新闻聚合器的软件呈现给用户。该聚合器可以内置到网站中，安装在台式计算机上或安装在移动设备上。用户可以通过在阅读器中输入提要的 URI 或单击浏览器的提要图标来订阅提要。RSS 阅读器会定期检查用户的提要中是否有新信息，如果启用了该功能，则可以自动下载。阅读器还提供了一个用户界面。\n\n## 我的总结：\n\n- RSS 是一种格式，标准。\n- 使用 RSS 的协议可以做成一个新闻聚合器，新闻提醒器，把你想要的新闻聚合起来并提醒且提供给你。\n\n# 能干嘛？\n\n- 能做为信息聚合，只看你想看的信息，能信息提醒，每天信息更新，你想看的信息会自动获取给你。\n\n# 怎能做到的？\n\n- 步骤分三步，分别对应三种工具。\n- 下面我会一一介绍原理并介绍我使用的工具。\n\n## 信息包装——包装工具\n\n- 有些网站会提供支持 RSS 协议的阅读源（支持的话直接使用就行了），有些则不行。这个时候就需要将信息进行打包的工具。\n\n### rsshub —— 万物皆可 RSS\n\n- [传送门](https://docs.rsshub.app/)\n- 这个工具使得 RSS 国内资源的获取曲线变得普通人都可以使用了。\n- 直接阅读文档即可使用。\n\n### feed43 —— 学会几乎所有网站皆可 RSS（需安全代理/科学上网）\n\n- 一个视频教程[传送门](https://www.bilibili.com/video/av31361577?from=search&seid=4397539768243415833)\n- 这个工具是 rsshub 没有资源，比如本人学校网站啊这类的。就可以自己搞一个使用。\n\n## 信息提取——网站\n\n- 制作完 RSS 源之后直接把链接复制到订阅源订阅就完事了。等待网站自己去获取信息。这类网站有很多个。我就推荐三个。\n\n### inoreader\n\n- 一开始大学老师介绍的都挺详细的了。\n- 有广告。（这点让我放弃了它。）\n\n### ttrss\n\n- 这个是要自己搭建网站使用的。界面很棒，功能很全，你想要的都有了。邮件提醒这些。但是！很占空间。。。\n- 可以设置关键字去获取自己想要的。\n- 可以设置获取频率。（一小时一次还是一分钟一次。）\n\n### miniflux(我现在在使用的。)\n\n- 这个我就有很多发言权了。\n- 这个也是要自己搭建网站使用的。\n- 网站非常精简，只有最基本功能。其实认真想想，最基本功能就够了，也没必要用这么多。重要提醒完全可以使用 IFTTT。\n- 有快捷键。\n- 可以多用户。\n- 可以设置获取频率。（一小时一次还是一分钟一次。）\n\n## 信息阅读——阅读器\n\n- 这个其实可以不用的。一般网站会给你直接阅读，但是为了阅读体验。最好使用自己的阅读器。而且一般网站都没有安卓 ios 客户端。（有也不好用哇）\n\n### ios Mac feeder(30 块钱)\n\n- 这个是我一开始使用 RSS 的时候就一直在用的阅读器。\n- 到我这版是 feeder4，网站分类做的是真的好。\n- 有 bioreader 功能。（阅读英文有用）\n\n### unread ios 68 块/ android\n\n- 这个软件在全面屏体验非常好的。完全沉浸式阅读体验极佳。\n- 不支持软件内播放视频。（就这点让我不太想要了{你只是缺钱/xyx}）\n\n# 总结\n\n- 想好订阅什么网站就去订阅 + 阅读吧。加油！\n"},{"title":"黑苹果的一些总结与配置","url":"//p/83668dd7dd5b4dc19a347027a429dfd6/","content":"\n---\n\n## title: 黑苹果的一些总结与配置&#xA;date: 2020-01-01 01:41:25&#xA;tags:\n\n# 一些 BB 的话\n\n- 安装黑苹果要么就找个好教程一步到位，要么研究好了在安装，别东搞一些西搞一些，流程得搞清楚。最好会一些基本装系统常识。\n- 从决定安装黑苹果的时候开始，你就必须有足够的理由，足够的需求，因为这个东西真的是永无止境，即使白苹果都要迭代更新更何况是黑苹果，不可能 100%像白苹果一样。教程也不是万能的，每台电脑都有可能出 BUG（我的就是这样），so。。。\n\n# 我的配置\n\n- CPU：amd ryzen 1600\n- 内存：8G（有钱就升级）\n- 主硬盘：建兴 T10（有钱最好直接上三星，但是有一个三星盘是装不了黑苹果，我查了下海康威视的 c2000 跟 c2000pro 都行，支持国货呗。主要是比三星便宜一半）\n- 显卡：蓝宝石超白金 rx580（2304sp）（我为什么在这显卡里备注了，请看下面）\n- 网卡：带转接板的 PCIE 接口，bcm94331cd\n- 机箱：乔思伯 V4（大电源 + 24.4cm\\*24.4cm 的板子到 2020 年 1 月 1 日时全网最小容积没有之一！）\n\n# 我踩的坑（有一部分都是准备踩上去了的）\n\n## 硬件配置\n\n- 显卡最好（必须）是 Amd 的卡（免驱无敌），英伟达的大部分（有一小小小部分是可以上 10.14）只能到 10.13.6（夜间模式是没有的了）。而且英伟达只能用 webDriver（听闻 1080 用了这个驱动跟 1050 的性能差不多？？？）\n- ryzen1600 部分可以超频到 3.8G，然而蓝牙就 GG 了。（刚刚发现的一个 bug），我只能调回 3.2（难受）。\n- 装机 U 盘听说不能少于 8G？我直接上了 32G\n- rx580 想要直接免驱就用 2304sp 的，在网上卖的大多数是 2048sp 阉割卡！！不过 2048 的阉割卡可以刷 bios 改成 rx570 使用免驱（rx570 跟 rx5802048sp 显卡天梯图是一样的。）\n- 显卡用 A 卡还要注意牌子牌子！！！蓝宝石跟纳兰恒进是直接免驱，XFX 是有几率凉凉的，注意注意！最好选这两个牌子吧。\n- 网卡一定要选 PCIE 的，usb 用的十分不稳定，特别容易翻车。如果实在没钱可以买我的型号，不再转接口板某宝也就 50 左右，还送蓝牙。有钱肯定上好的。但是我没太大需求也没钱。\n- 蓝牙都是走 USB 通道的，其实买 usb 跟 Wi-Fi 蓝牙一体板差不多，不过一体板的外接有根天线，信号比较好。\n\n## 软件配置\n\n- 大部分都是教程自带的，不会的也问了卖教程的，售后服务是真的赞。链接我会附在最后（某宝 9.9 30 天售后牛皮）\n- amd 安装专用的，Intel 安装原版的\n- 蓝牙一直断断续续，问了店家，店家给出了几个方案，都试过没用，用百度找也不行，最后是 tonymacx86 论坛找帖子找出来的，有一部分跟店家的方案类似，但是又多了一些东西。所以，教程只能有绝大部分作用，关键还是自己得知道怎么找。\n\n# 店家链接（无广告）\n\n- [传送门](https://m.tb.cn/h.eAepHxE?sm=7ddf61)\n"},{"title":"使用docker-compose部署miniflux","url":"//p/85e5339ae333471b8aeb6dd6e5aa67fe/","content":"\n---\n\n## title: 使用 docker compose 部署 miniflux&#xA;date: 2019-10-08 19:22:26&#xA;tags: miniflux\n\n# 使用 docker compose 部署 miniflux\n\n## 参考链接\n\n- [传送门](https://blog.frognew.com/2019/04/docker-compose-install-miniflux.html)\n\n## 注意事项\n\n- 什么都不要改，直接使用就好\n\n## 教程复制版（加改良）\n\n```\ncd /home\nmkdir miniflux\ncd miniflux\n```\n\n- 创建 docker-compose.yml:\n\n```\nversion: '3'\nservices:\n  miniflux:\n    image: miniflux/miniflux:latest\n    ports:\n      - \"8080:8080\"\n    depends_on:\n      - db\n    environment:\n      - DATABASE_URL=postgres://miniflux:secret@db/miniflux?sslmode=disable\n  db:\n    image: postgres:10.1\n    environment:\n      - POSTGRES_USER=miniflux\n      - POSTGRES_PASSWORD=secret\n    volumes:\n      - /home/miniflux/miniflux-db:/var/lib/postgresql/data\n```\n\n- bash:\n\n```\ndocker-compose up -d\nCreating miniflux_db_1 ... done\nCreating miniflux_miniflux_1 ... done\n```\n\n- 执行数据库迁移：\n\n```\ndocker exec -ti miniflux_miniflux_1 /usr/bin/miniflux -migrate\n\n//以下为运行成功的显示信息\nCurrent schema version: 0\nLatest schema version: 22\nMigrating to version: 1\nMigrating to version: 2\nMigrating to version: 3\nMigrating to version: 4\nMigrating to version: 5\nMigrating to version: 6\nMigrating to version: 7\nMigrating to version: 8\nMigrating to version: 9\nMigrating to version: 10\nMigrating to version: 11\nMigrating to version: 12\nMigrating to version: 13\nMigrating to version: 14\nMigrating to version: 15\nMigrating to version: 16\nMigrating to version: 17\nMigrating to version: 18\nMigrating to version: 19\nMigrating to version: 20\nMigrating to version: 21\nMigrating to version: 22\n```\n\n- 创建第一个用户：\n\n```\ndocker exec -ti miniflux_miniflux_1 /usr/bin/miniflux -create-admin\n```\n\n- 运行 127.0.0.1 可以改为自己服务器 IP or 域名：\n\n```\nhttp://127.0.0.1:8080\nhttp://域名:8080\n```\n"},{"title":"shadowsocks","url":"//p/637baf7367df44108f34ad11ec841026/","content":"\n---\n\n## layout: 三行安装 shadowsocks&#xA;title: shadowsocks&#xA;date: 2019-10-08 19:14:00&#xA;tags: \\[Shadowsocks,美区 APPID,Shadowrocket]\n\n# 三行安装 Shadowsocks\n\n## 注意事项：\n\n- 截止 2019.10.8 号，非常容易被封。请谨慎使用。\n\n## 代码如下：\n\n```\nwget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh\n\nchmod +x shadowsocks.sh\n\n./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log\n```\n\n### IOS 客户端\n\n- 最好使用小火箭 Shadowrocket 有些软件经测试只能使用小火箭安全代理，其他都用不了。\n- 小火箭安装在美版 APP Store。\n\n#### 美区 APPID 注册教程\n\n- [传送门](https://zhuanlan.zhihu.com/p/36574047)\n- 某宝买美区 gift card 充值。（我就是这样购买的。）\n"},{"title":"Springboot前后端完全分离","url":"//p/00dc4c936947437e82a07f4718ba20fd/","content":"\n---\n\n## title: Springboot 前后端完全分离&#xA;date: 2020-02-06 21:50:04&#xA;tags:\n\n# 前言\n\n- 我在毕设时为了方便设备与用户使用同一套后端而做的设置。\n- Springboot 在分离前后端时可以直接使用 JSON 传输。\n- 如果有做权限需求，其实这个最重要的就是 Spring Security JSON 化问题，其他问题差不多就只是增删查改。\n- 这个 security JSON 化在网页上一搜就很多，但是可以直接拿来使用是真的没有。SO 我就直接把我的代码贴出来啦。\n\n# 代码\n\n## 前端\n\n### html\n\n```\n\t<form class=\"layui-form changePwd\">\n\t\t<div style=\"margin:0 0 15px 110px;color:#f00;\">使用说明：用户名与密码不得低于6位数！</div>\n\t\t<div class=\"layui-form-item\">\n\t\t    <label class=\"layui-form-label\">用户名</label>\n\t\t    <div class=\"layui-input-block\">\n\t\t    \t<input type=\"text\" value=\"\" placeholder=\"请输入用户名\" lay-verify=\"required|userName\" id=\"userName\" class=\"layui-input \">\n\t\t    </div>\n\t\t</div>\n\t\t<div class=\"layui-form-item\">\n\t\t    <label class=\"layui-form-label\">密码</label>\n\t\t    <div class=\"layui-input-block\">\n\t\t    \t<input type=\"password\" value=\"\" placeholder=\"请输入密码\" lay-verify=\"required|newPwd\" id=\"newPwd\" class=\"layui-input pwd\">\n\t\t    </div>\n\t\t</div>\n\t\t<div class=\"layui-form-item\">\n\t\t    <div class=\"layui-input-block\">\n\t\t    \t<button class=\"layui-btn\" lay-submit=\"\" lay-filter=\"login\">立即登陆</button>\n\t\t\t\t<button type=\"reset\" class=\"layui-btn layui-btn-primary\">重置</button>\n\t\t    </div>\n\t\t</div>\n\t</form>\n```\n\n### JS\n\n```\nform.on(\"submit(login)\",function(data){\n        \tvar index = layer.msg('提交中，请稍候',{icon: 16,time:false,shade:0.8});\n        \t$.ajax({\n    \t\t\turl : \"login\",\n    \t\t\ttype : \"post\",\n    \t\t\t// data表示发送的数据\n    \t\t\tdata : JSON.stringify({\n    \t\t\t\t\"${_csrf.parameterName}\":\"${_csrf.token}\",\n    \t\t\t\tuserName : $(\"#userName\").val(),\n    \t\t\t\tpassword : $(\"#newPwd\").val()\n    \t\t\t}),\n    \t\t\t// 定义发送请求的数据格式为JSON字符串\n    \t\t\tcontentType : \"application/json;charset=UTF-8\",\n    \t\t\t// 定义回调响应的数据格式为JSON字符串,该属性可以省略\n    \t\t\tdataType : \"json\",\n    \t\t\t// 成功响应的结果\n    \t\t\tsuccess : function(data) {\n    \t\t\t\tlayer.msg(data.information);\n    \t\t\t\tif (data.status == \"200\") {\n    \t\t\t\t\twindow.location.href = 'index.html';\n    \t\t\t\t\treturn true;\n    \t\t\t\t}\n    \t\t\t\treturn false;\n    \t\t\t},\n    \t\t\terror : function(data) {\n    \t\t\t\tlayer.msg(data.information);\n    \t\t\t}\n    \t\t});\n        \treturn false; //阻止表单跳转。如果需要表单跳转，去掉这段即可。\n        })\n```\n\n## 后端\n\n### security 配置类——AppAuthenticationSuccessHandler\n\n- 看名字就知道是什么类了\n\n```\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.web.DefaultRedirectStrategy;\nimport org.springframework.security.web.RedirectStrategy;\nimport org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class AppAuthenticationSuccessHandler extends SimpleUrlAuthenticationSuccessHandler{\n\t// Spring Security 通过RedirectStrategy对象负责所有重定向事务\n\t\tprivate RedirectStrategy redirectStrategy = new DefaultRedirectStrategy();\n\n\t\t/*\n\t\t * 重写handle方法，方法中通过RedirectStrategy对象重定向到指定的url\n\t\t * */\n\t\t@Override\n\t\tprotected void handle(HttpServletRequest request, HttpServletResponse response,\n\t\t\t\tAuthentication authentication)\n\t\t\t\tthrows IOException {\n\t\t\t// 通过determineTargetUrl方法返回需要跳转的url\n\t\t\tString targetUrl = determineTargetUrl(authentication);\n\t\t\t// 重定向请求到指定的url\n\t\t\tredirectStrategy.sendRedirect(request, response, targetUrl);\n\t\t}\n\n\t\t/*\n\t\t * 从Authentication对象中提取角色提取当前登录用户的角色，并根据其角色返回适当的URL。\n\t\t */\n\t\tprotected String determineTargetUrl(Authentication authentication) {\n\t\t\tString url = \"\";\n\n\t\t\t// 获取当前登录用户的角色权限集合\n\t\t\tCollection<? extends GrantedAuthority> authorities = authentication.getAuthorities();\n\n\t\t\tList<String> roles = new ArrayList<String>();\n\n\t\t\t// 将角色名称添加到List集合\n\t\t\tfor (GrantedAuthority a : authorities) {\n\t\t\t\troles.add(a.getAuthority());\n\t\t\t}\n\n\t\t\t// 判断不同角色跳转到不同的url\n\t\t\tif (isAdmin(roles)) {\n\t\t\t\turl = \"/page/admin/index.html\";\n\t\t\t} else if (isUser(roles)) {\n\t\t\t\turl = \"/index.html\";\n\t\t\t} else {\n\t\t\t\turl = \"/page/404.html\";\n\t\t\t}\n\t\t\tSystem.out.println(\"url = \" + url);\n\t\t\treturn url;\n\t\t}\n\n\t\tprivate boolean isUser(List<String> roles) {\n\t\t\tif (roles.contains(\"ROLE_USER\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate boolean isAdmin(List<String> roles) {\n\t\t\tif (roles.contains(\"ROLE_ADMIN\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tpublic void setRedirectStrategy(RedirectStrategy redirectStrategy) {\n\t\t\tthis.redirectStrategy = redirectStrategy;\n\t\t}\n\n\t\tprotected RedirectStrategy getRedirectStrategy() {\n\t\t\treturn redirectStrategy;\n\t\t}\n}\n\n```\n\n### security 配置类——AppSecurityConfigurer\n\n- Security 核心配置类\n\n```\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.authentication.AuthenticationFailureHandler;\nimport org.springframework.security.web.authentication.AuthenticationSuccessHandler;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport ink.mastermind.AllINOne.pojo.Json;\nimport ink.mastermind.AllINOne.service.UserService;\n\n/**\n * 自定义Spring Security认证处理类的时候\n * 我们需要继承自WebSecurityConfigurerAdapter来完成，相关配置重写对应 方法即可。\n * */\n@Configuration\npublic class AppSecurityConfigurer extends WebSecurityConfigurerAdapter{\n\n\t// 依赖注入用户服务类\n\t@Autowired\n    private UserService userService;\n\n\t// 依赖注入加密接口\n\t@Autowired\n    private PasswordEncoder passwordEncoder;\n\n\t// 依赖注入用户认证接口\n\t@Autowired\n    private AuthenticationProvider authenticationProvider;\n\n\t// 依赖注入认证处理成功类，验证用户成功后处理不同用户跳转到不同的页面\n\t@Autowired\n\tAppAuthenticationSuccessHandler appAuthenticationSuccessHandler;\n\n\t/*\n\t *  BCryptPasswordEncoder是Spring Security提供的PasswordEncoder接口是实现类\n\t *  用来创建密码的加密程序，避免明文存储密码到数据库\n\t */\n\t@Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n\t// DaoAuthenticationProvider是Spring Security提供AuthenticationProvider的实现\n\t@Bean\n    public AuthenticationProvider authenticationProvider() {\n\t\tSystem.out.println(\"AuthenticationProvider authenticationProvider\");\n\t\t// 创建DaoAuthenticationProvider对象\n        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();\n        // 不要隐藏\"用户未找到\"的异常\n        provider.setHideUserNotFoundExceptions(false);\n        // 通过重写configure方法添加自定义的认证方式。\n        provider.setUserDetailsService(userService);\n        // 设置密码加密程序认证\n        provider.setPasswordEncoder(passwordEncoder);\n\n        //new BCryptPasswordEncoder().encode(fkUser.getPassword().trim()))\n        return provider;\n    }\n\t@Bean\n\tCustomAuthenticationFilter customAuthenticationFilter() throws Exception {\n\t    CustomAuthenticationFilter filter = new CustomAuthenticationFilter();\n\t    filter.setAuthenticationSuccessHandler(new AuthenticationSuccessHandler() {\n\t        @Override\n\t        public void onAuthenticationSuccess(HttpServletRequest req, HttpServletResponse resp, Authentication authentication) throws IOException, ServletException {\n\t            resp.setContentType(\"application/json;charset=utf-8\");\n\t            PrintWriter out = resp.getWriter();\n\t            Json json = new Json(200, \"登录成功\", null);\n\t            out.write(new ObjectMapper().writeValueAsString(json));\n\t            out.flush();\n\t            out.close();\n\t        }\n\t    });\n\t    filter.setAuthenticationFailureHandler(new AuthenticationFailureHandler() {\n\t        @Override\n\t        public void onAuthenticationFailure(HttpServletRequest req, HttpServletResponse resp, AuthenticationException e) throws IOException, ServletException {\n\t            resp.setContentType(\"application/json;charset=utf-8\");\n\t            PrintWriter out = resp.getWriter();\n\t            Json json = new Json(500, \"登录失败\", null);\n\t            out.write(new ObjectMapper().writeValueAsString(json));\n\t            out.flush();\n\t            out.close();\n\t        }\n\t    });\n\t    filter.setAuthenticationManager(authenticationManagerBean());\n\t    return filter;\n\t}\n\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    \tSystem.out.println(\"AppSecurityConfigurer configure auth......\");\n    \t// 设置认证方式。\n    \tauth.authenticationProvider(authenticationProvider);\n    }\n\n    /**\n     * 设置了登录页面，而且登录页面任何人都可以访问，然后设置了登录失败地址，也设置了注销请求，注销请求也是任何人都可以访问的。\n     * permitAll表示该请求任何人都可以访问，.anyRequest().authenticated(),表示其他的请求都必须要有权限认证。\n     * */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n    \tSystem.out.println(\"AppSecurityConfigurer configure http......\");\n    \thttp.csrf().disable();\n    \thttp.headers().frameOptions().sameOrigin();\n    \thttp.authorizeRequests()\n    \t// spring-security 5.0 之后需要过滤静态资源\n    \t.antMatchers(\"/register.html\",\"/register\",\n    \t\t\t\"/login.html\",\"/login\",\n    \t\t\t\"/findPassword.html\",\"/findPassword\",\n    \t\t\t\"/json/**\",\"/layui/**\",\"/images/**\",\"/css/**\",\"/js/**\").permitAll()\n\t  \t.antMatchers(\"/page/**\").hasAnyRole(\"USER\",\"ADMIN\")\n\t  \t.antMatchers(\"/admin/**\").hasAnyRole(\"ADMIN\")\n\t  \t.anyRequest().authenticated()\n\t  \t.and()\n\t  \t.formLogin().loginPage(\"/login\").successHandler(appAuthenticationSuccessHandler)\n\t  \t.usernameParameter(\"userName\").passwordParameter(\"password\")\n\t  \t.and()\n\t  \t.logout().permitAll()\n\t  \t.and()\n\t  \t.exceptionHandling().accessDeniedPage(\"/login.html\");\n        http.addFilterAt(customAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class);\n\n    }\n}\n\n```\n\n### security 配置类——CustomAuthenticationFilter\n\n- 这个是一个读取 JSON 的过滤器。它是继承 UsernamePasswordAuthenticationFilter 的。\n\n```\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.http.MediaType;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class CustomAuthenticationFilter extends UsernamePasswordAuthenticationFilter {\n\t@Override\n\tpublic Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows AuthenticationException {\n\t\tif (request.getContentType().equals(MediaType.APPLICATION_JSON_UTF8_VALUE)\n\t\t\t\t|| request.getContentType().equals(MediaType.APPLICATION_JSON_VALUE)) {\n\t\t\tObjectMapper mapper = new ObjectMapper();\n\t\t\tUsernamePasswordAuthenticationToken authRequest = null;\n\t\t\ttry (InputStream is = request.getInputStream()) {\n\t\t\t\tMap<String, String> authenticationBean = mapper.readValue(is, Map.class);\n\t\t\t\tauthRequest = new UsernamePasswordAuthenticationToken(authenticationBean.get(\"userName\"),\n\t\t\t\t\t\tauthenticationBean.get(\"password\"));\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\tauthRequest = new UsernamePasswordAuthenticationToken(\"\", \"\");\n\t\t\t} finally {\n\t\t\t\tsetDetails(request, authRequest);\n\t\t\t\treturn this.getAuthenticationManager().authenticate(authRequest);\n\t\t\t}\n\t\t} else {\n\t\t\treturn super.attemptAuthentication(request, response);\n\t\t}\n\t}\n}\n```\n\n### security 配置类——MyPasswordEncoder\n\n- 密码编码解码器\n\n```\nimport org.springframework.security.crypto.bcrypt.BCrypt;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\npublic class MyPasswordEncoder implements PasswordEncoder{\n\tpublic static MyPasswordEncoder m = new MyPasswordEncoder();\n\n\t@Override\n\tpublic String encode(CharSequence arg0) {\n\t\treturn new BCryptPasswordEncoder().encode(arg0.toString());\n\t}\n\n\t@Override\n\tpublic boolean matches(CharSequence raw, String encode) {\n\t\treturn BCrypt.checkpw(raw.toString(), encode);\n\t}\n\n}\n\n```\n\n### 用户服务类--UserService\n\n- 这个类是为了调用数据库中用户，密码与权限所使用的。\n\n```\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.annotation.Resource;\n\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport ink.mastermind.AllINOne.dao.UserDao;\nimport ink.mastermind.AllINOne.pojo.User;\nimport ink.mastermind.AllINOne.security.MyPasswordEncoder;\n\n@Service(\"userService\")\npublic class UserService implements UserDetailsService {\n\n\t@Resource\n\tprivate UserDao userDao;\n\n\t/**\n\t * @param user 注册用户\n\t */\n\t@Transactional\n\tpublic void register(User user) {\n\t\t// TODO Auto-generated method stub\n\t\tuser.setPassword(MyPasswordEncoder.m.encode(user.getPassword()));\n\t\tthis.userDao.save(user);\n\t}\n\n\t/**\n\t * @param user\n\t * @return 通过用户名查找用户并返回\n\t */\n\t@Transactional\n\tpublic List<User> findUserByUserName(User user) {\n\t\t// TODO Auto-generated method stub\n\t\treturn this.userDao.findByUserName(user.getUserName());\n\t}\n\n\t/**\n\t * security模块\n\t */\n\tpublic UserDetails loadUserByUsername(String userName) throws UsernameNotFoundException {\n\t\t// 调用持久层接口方法查找用户\n\t\tList<User> l = this.userDao.findByUserName(userName);\n\t\tUser user = (l != null && !l.isEmpty()) ? l.get(0) : null;\n\t\tif (user == null) {\n\t\t\tthrow new UsernameNotFoundException(\"用户名不存在\");\n\t\t}\n\t\t// 创建List集合，用来保存用户权限，GrantedAuthority对象代表赋予给当前用户的权限\n\t\tList<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();\n\t\tauthorities.add(new SimpleGrantedAuthority(user.getRole()));\n\t\treturn new org.springframework.security.core.userdetails.User(user.getUserName(), user.getPassword().trim(),\n\t\t\t\tauthorities);\n\t}\n\n}\n\n```\n\n### JSON 自制封装模块\n\n```\npublic class Json {\n\tprivate Integer status;\n\tprivate String information;\n\tprivate Object object;\n\n\tpublic Json() {\n\t\tsuper();\n\t\t// TODO Auto-generated constructor stub\n\t}\n\n\tpublic Integer getStatus() {\n\t\treturn status;\n\t}\n\n\tpublic void setStatus(Integer status) {\n\t\tthis.status = status;\n\t}\n\n\tpublic String getInformation() {\n\t\treturn information;\n\t}\n\n\tpublic void setInformation(String information) {\n\t\tthis.information = information;\n\t}\n\n\tpublic Object getObject() {\n\t\treturn object;\n\t}\n\n\tpublic void setObject(Object object) {\n\t\tthis.object = object;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Json [status=\" + status + \", information=\" + information + \", object=\" + object + \"]\";\n\t}\n\n\tpublic Json(Integer status, String information, Object object) {\n\t\tsuper();\n\t\tthis.status = status;\n\t\tthis.information = information;\n\t\tthis.object = object;\n\t}\n\n}\n\n```\n\n# 链接\n\n- [原来链接](https://segmentfault.com/a/1190000018157525?utm_soburce=tag-newest)\n"},{"title":"xkeymacs-sharpkeys完美将Emacs融入Windows的配置方案","url":"//p/7eb61a4a7afa46c9a4f014af43c2f8d4/","content":"\n---\n\n## title: xkeymacs + sharpkeys 完美将 Emacs 融入 Windows 的配置方案&#xA;date: 2019-11-03 21:21:21&#xA;tags: \\[emacs,sharpkeys,xkeymacs]\n\n# xkeymacs\n\n## 来源\n\n- GitHub 开源项目\n- [传送门](https://github.com/fujieda/xkeymacs)\n\n## 作用\n\n- 几乎完美将 Emacs 融入 Windows，在 Windows 上使用 Emacs 快捷键\n\n## 下载地址\n\n- [传送门](https://github.com/fujieda/xkeymacs/releases)\n\n## 注意事项\n\n- Ctrl + Q 为暂时开关 Emacs 快捷键\n- 在 Chrome 浏览器无法使用 CTRL + F （如果要使用，先关闭 ctrl + Q）\n- 也是 Chrome 浏览器，Ctrl + W 等快捷键均无法使用，建议安装 vimium 使用（这个插件非常好用！）\n\n# sharpkeys\n\n## 来源\n\n- GitHub 开源项目\n- [传送门](https://github.com/randyrants/sharpkeys)\n\n## 作用\n\n- 这个软件是通过修改注册表，将键位修改，常见 emacser 修改 caps 键与 CTRL 键互换，vimer 修改 esc 与 caps 键互换。\n- 可视化傻瓜操作，无敌好用（不过我之前都是直接代码修改注册表的。。。）\n\n## 下载地址\n\n- [传送门](https://github.com/randyrants/sharpkeys/releases)\n"},{"title":"anki-记忆卡神器简介篇","url":"//p/c073a3b904674313bb54dae457861beb/","content":"\n---\n\n## title: anki-记忆卡神器简介篇&#xA;date: 2019-10-15 18:20:52&#xA;tags: \\[anki]\n\n# 前言\n\n- 你有没有遇到需要记忆的东西太多而烦恼？\n- 思维导图画了怎么记？\n- 我的记忆简直不堪一击？\n- anki 能帮你忙！\n\n# anki 是什么？\n\n- 一个开源的程序，还免费！（除了 ios（买断制程序），其他软件与服务器均免费）\n- Anki 是一个抽认卡软件。\n\n> 每个抽认卡的一侧都带有问题，而另一侧则带有答案。抽认卡通常用于记忆词汇，历史日期，公式或可以通过问答格式学习的任何主题。\n\n- 间隔重复记忆(可自定义)。参考艾宾浩斯遗忘曲线。\n- 抽认卡锻炼了积极回忆的心理过程。（主动回忆）\n\n# anki 教程（入门相对于还是有点难度的，耐心，慢慢来）\n\n## 先是链接\n\n- [anki 中文网站](https://www.ankichina.net/)\n- [anki 在线使用网站 + anki 共享库](https://ankiweb.net/)\n- [知乎专栏-大佬总结入门](https://zhuanlan.zhihu.com/p/21328602)\n- [Anki（知识记忆工具） - 知乎](https://www.zhihu.com/topic/19783871/top-answers)\n- [手册](https://www.ankichina.net/Index/ankishouce)\n\n## 我的入门思路\n\n- anki 这个东西一开始还真的拿它不是办法，我建议一开始先看大佬[→→→→→→Anki 终极汇总——请先看我！←←←←←← - 知乎](https://zhuanlan.zhihu.com/p/21328602)总结这个东西怎么用这样子。\n\n### 下载软件\n\n- 这 TM 是废话么。。\n- 其实 anki 有在线版的。但是建议还是使用软件\n\n### 新建\n\n- 进入电脑主界面（建议用电脑而不是手机新建卡片）\n- 创建并进入记忆库\n- 添加\n- 一开始 front 是问题（你要提示的内容，背单词的话就是词汇英文。）\n- back 是答案。\n- 标签可以不写。\n- 点击添加就完事了\n\n### 删除\n\n- 浏览\n- 找到你要删除的，右键删除\n\n# anki 间隔重复\n\n- 入门后仅仅只是入门，你还有许多东西要学的，而间隔重复是最最必要的，因为 anki 非常的自由（就像 C 语言的指针），因此理解这个并使用是必要的。\n"},{"title":"阿里云应用服务器搭建安全代理","url":"//p/e00702beac014dbc9f40b73c3952cbb4/","content":"\n---\n\n## title: 阿里云应用服务器搭建安全代理&#xA;date: 2019-10-09 10:30:50&#xA;tags: \\[VPS,阿里云]\n\n# 阿里云应用服务器搭建安全代理\n\n- 我在这里就讲为什么，具体教程直接看之前的 shadowsocks 或者是 v2ray。\n\n## 上传送门\n\n- [阿里云限量红包](https://promotion.aliyun.com/ntms/yunparter/invite.html?userCode=raqx5cni)\n- [阿里云轻量应用服务器购买链接](https://www.aliyun.com/product/swas?spm=5176.12825654.eofdhaal5.3.5f2e2c4aVheLz5&aly_as=yEER083m)\n\n## 为什么选择阿里云应用服务器香港节点？\n\n- 我们先看看配置。\n- 再看看延时\n- 最后几点建议\n\n### 配置\n\n#### 24 元/月（推荐配置）\n\n- 1 核 1G SSD:25GB\n- 峰值带宽 30Mbps（能打游戏，够用）\n- 每月流量 1TB\n\n#### 34 元/月\n\n- 1 核 2G SSD:50GB\n- 峰值带宽 30Mbps（能打游戏，够用）\n- 每月流量 2TB\n\n### 延时(2019 年 10 月 9 日)\n\n```\n来自 47.240.93.5* 的回复: 字节=32 时间=40ms TTL=47\n来自 47.240.93.5* 的回复: 字节=32 时间=31ms TTL=45\n来自 47.240.93.5* 的回复: 字节=32 时间=27ms TTL=47\n```\n\n### 几点建议\n\n- 按月购买！如果服务器无法连接可以在阿里云申请迁移\n- 建议现在安全代理选择 v2ray 而不是 ss\n- 阿里云最便宜跟最贵都为 30Mbps 带宽。1T 流量基本够日常使用（我的直接开机自启动。一直连接状态完全够）\n- 建议服务器自己一个人使用。//万一被查水表也明明白白。\n"},{"title":"贪吃蛇在输入框里玩？！？？？","url":"//p/5f9df7fcaadf40eabf04ccda57e885a8/","content":"\n---\n\n## title: 贪吃蛇在输入框里玩？！？？？&#xA;date: 2019-11-08 12:31:11&#xA;tags:\n\n- [直接传送门](https://demian.ferrei.ro/snake)\n"},{"title":"科学上网——PAC文件配置","url":"//p/0bc3236f878f43529093c6416a6214db/","content":"\n---\n\n## title: 科学上网——PAC 文件配置&#xA;date: 2020-01-11 00:39:21&#xA;tags:\n\n# 为什么要设置 PAC？\n\n- 经检验，内网服务器可以直接通过。127.0.0.1 之类可以直接直连。\n- 科学上网与直接连接无缝切换。例如，油管看完视频后直接切换网页去看 bilibili。\n\n# 什么是 PAC 文件？\n\n## 维基百科\n\n- 代理自动配置（英语：Proxy auto-config，简称 PAC）是一种网页浏览器技术，用于定义浏览器该如何自动选择适当的代理服务器来访问一个网址。\n\n# PAC 文件——黑名单\n\n- 黑名单顾名思义就是走服务器的，只能科学上网才能使用的。\n- 配置位置：一般都会在独立软件上或者是软路由上使用。\n- 著名的有：GFWList，一般软件都默认这个。。。\n- <https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt>\n\n# PAC 文件——白名单\n\n- 白名单是指这在名单上不走服务器的，直接连接使用的。\n- 目的是为了在黑名单基础上加快访问。\n- 缺点是去更多流量。（有待考证）\n- 配置位置：proxy-switchyomega（Chrome）\n- [传送门](https://github.com/breakwa11/gfw_whitelist)\n"},{"title":"docker使用脚本自动安装","url":"//p/6c962a326114472580b802aa7387f4ae/","content":"\n---\n\n## title: docker 使用脚本自动安装&#xA;date: 2019-10-08 19:38:06&#xA;tags: \\[docker-compose,docker]\n\n# docker 使用脚本自动安装\n\n- 在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Debian 系统上可以使用这套脚本安装，另外可以通过 --mirror 选项使用国内源进行安装：\n\n```\n$ curl -fsSL get.docker.com -o get-docker.sh\n$ sudo sh get-docker.sh --mirror Aliyun\n#$ sudo sh get-docker.sh --mirror AzureChinaCloud\n```\n\n## docker-compose 安装\n\n```\npip install docker-compose\n```\n"},{"title":"树莓派-智能实验室入门配置教程","url":"//p/7d72bec25d80414fb481f24ff5156be3/","content":"\n---\n\n## title: 树莓派-智能实验室入门配置教程&#xA;date: 2019-10-23 14:38:46&#xA;tags: \\[树莓派,智能实验室]\n\n# MicroBit 教程\n\n- microbit 开发板资料地址：<http://www.yahboom.com/study/micro-board> 密码：fofz\n\n- microbit 扩展板（专业级）资料地址：< <http://yahboom.com/study/bitbot-board> > 密码：mjqg\n\n---\n\n# Arduino 教程\n\n- 学完 C 教程过度：< [http://wiki.dfrobot.com.cn/index.php/Arduino%E7%BC%96%E7%A8%8B%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C#>](http://wiki.dfrobot.com.cn/index.php/Arduino%E7%BC%96%E7%A8%8B%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C#>)\n\n- emacs' arduino IDE（敢情我电脑用不了，不过我直接使用 emacs 自动补全+arduino IDE）： < [http://coney.github.io/2013/11/compile-and-upload-adruino-source-form-cli/>](http://coney.github.io/2013/11/compile-and-upload-adruino-source-form-cli/>)\n\n- 官方教程（带各类库函数）：< [https://www.arduino.cc/reference/en/>](https://www.arduino.cc/reference/en/>)\n\n---\n\n# 树莓派入门教程\n\n## sd 卡安装系统\n\nwindows:< [https://jingyan.baidu.com/article/ab0b563066668bc15afa7d18.html>](https://jingyan.baidu.com/article/ab0b563066668bc15afa7d18.html>)\n\nlinux/mac:<https://jingyan.baidu.com/article/636f38bb4f7af9d6b84610cd.html>\n\n## 安装完系统以后就配置内存卡文件\n\n```\n首先，在SD卡中的/boot的目录下创建一个wpa_supplicant.conf文件夹并输入以下内容：\ncountry=CN\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\n\nnetwork={\nssid=\"WiFi-A\"\npsk=\"12345678\"\nkey_mgmt=WPA-PSK\npriority=1\n}\n\nnetwork={\nssid=\"WiFi-B\"\npsk=\"12345678\"\nkey_mgmt=WPA-PSK\npriority=2\nscan_ssid=1\n}\n//注意，以下不需要输入\n#ssid:网络的ssid\n#psk:密码\n#priority:连接优先级，数字越大优先级越高（不可以是负数）\n#scan_ssid:连接隐藏WiFi时需要指定该值为1\n\n如果你的 WiFi 没有密码\n\nnetwork={\nssid=\"你的无线网络名称（ssid）\"\nkey_mgmt=NONE\n}\n如果你的 WiFi 使用WEP加密\n\nnetwork={\nssid=\"你的无线网络名称（ssid）\"\nkey_mgmt=NONE\nwep_key0=\"你的wifi密码\"\n}\n如果你的 WiFi 使用WPA/WPA2加密\n\nnetwork={\nssid=\"你的无线网络名称（ssid）\"\nkey_mgmt=WPA-PSK\npsk=\"你的wifi密码\"\n}\n//ps：如果你不清楚 WiFi 的加密模式，可以在安卓手机上用 root explorer 打开\n\n然后在/boot目录下建一个ssh文件夹（删除.txt后缀名E），上电，试一试用电脑的putty连接树莓派的ip地址，注意树莓派的port的值为22\n然后在路由器上找到你的树莓派的ip地址。\n当树莓派启动后，如果连接不上，\n断电，SD卡的/boot目录下的ssh文件和wpa_supplicant.conf文件会被删除。\n然后再在/boot目录下建一个ssh文件夹就可以继续往下操作，而wpa_supplicant.conf文件已经配置好了，无需再写入。\n继续上电，如果连不上putty就继续重复/boot建ssh和上电操作。\n\n通过putty连接树莓派后初始名为pi，密码为raspberry，可以键入“sudo raspi-config”进入配置界面。\n进入的配置界面后\n可以在Network Options 中的Hostname 修改主机名称。\n可以在Interfacing Options 中的ssh 来打开树莓派的ssh用来远程连接，也可以打开vnc（树莓派和电脑都需要下载vnc）。\n可以在Advanced Options 中的Expand Filesystem 来自动扩展树莓派上的SD卡的储存空间（不能够使用读卡器进行读取）。\n退出配置界面后。\n可以输入“sudo apt-get install update”进行更新。\n然后输入“sudo apt-get install git-core”下载git clone 来从网上下载源代码。\n然后输入“git clone git://git.drogon.net/wiringPi”来下载wiringPi来控制树莓派的管脚，别急，wiringPi还没安装完\n接在输入“cd wiringPi”，在输入“./build”build脚本将会自动完成wiringPi库的编译和安装。\n```\n\n## putty 连接 Linux 教程\n\n- <https://blog.csdn.net/eastmount/article/details/52753135>\n\n## Linux 入门教程\n\n- 参考我的网站教程，但是有目的学习\n\n- 主要学习 cd,ls,pwd,mkdir,chmod,nano/vim/emacs（文本编辑器）,gcc/g++（编译器）,python,git(团队版本管理), 等等等等（想到再加）\n\n## 树莓派编程\n\n### 管脚安装介绍及其第一个代码编写\n\n< [https://blog.csdn.net/xukai871105/article/details/12684617>](https://blog.csdn.net/xukai871105/article/details/12684617>)\n\n### 树莓派 C 语言编程\n\n- 控制管脚 WiringPi 库官网（直接谷歌翻译就可以用了）：< [http://wiringpi.com/>](http://wiringpi.com/>)\n\n- 介绍：< [https://blog.csdn.net/hu7850/article/details/51785560#t2>](https://blog.csdn.net/hu7850/article/details/51785560#t2>)\n\n### 树莓派 Python 教程\n\n- 零起点廖雪峰 Python 教程：< [https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000>](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000>)\n\n- 12 小时 python 教程\n\n<http://campus.swarma.org/gpac=12#src=2>\n"},{"title":"markdown-windows工具-boostnote","url":"//p/8bba29d26f9b40eeae0ad8837c084d5f/","content":"\n---\n\n## title: markdown windows 工具-boostnote&#xA;date: 2019-10-14 11:41:02&#xA;tags: \\[markdown,boostnote]\n\n# 引言\n\n- 作为一个 emacser，在 Windows 使用 Emacs 巨无敌麻烦，我使用 emacs 现在的需求只是写写 markdown 博客而已。\n- 我的键盘是 gh60 的（就只有 60 个按键），十分之不方便。\n- 习惯 Linux 的快捷键回不去了。。。\n\n# boostnote\n\n- 然后这是我找到应该说是比较合适程序员（尤其是 vim，emacs 党的人）的软件了。（重中之重）\n- 使用起来还是十分的傻瓜化的。\n- 笔记可以联网同步，可以直接存放在云盘上。\n- 编写 markdown 可以可视化。\n- boostnote 是开源软件。你可以随意查看代码。\n\n# 官网\n\n- [官网传送门](https://boostnote.io/)\n"},{"title":"rsshub安装教程","url":"//p/11a0126f75504687864382634448f148/","content":"\n---\n\n## title: rsshub 安装教程&#xA;date: 2019-10-09 12:51:55&#xA;tags: \\[rss,rsshub]\n\n# rsshub 安装教程\n\n## 官方链接\n\n- [传送门（建议 docker-compose 部署）](https://docs.rsshub.app/install/#docker-compose-bu-shu)\n\n# 使用建议\n\n- 在你的浏览器安装 rsshub rader。(瞬间起飞。)\n"},{"title":"我的MacOS系统软件","url":"//p/1f4c627d7e034ce4b58f6f653ca6809f/","content":"\n---\n\n## title: 我的 MacOS 系统软件&#xA;date: 2021-01-12 10:21:48&#xA;tags: MacOS\n\n# 前言\n\n之前就一直想去开始写博客了，记录一些有趣的想法，比如说是用博客的在线目录写一些 Shell 的自动运维的脚本。这样在一些服务器上就直接运行在线目录就完事了。但是我之前整理 iCloud 时就忘记了把 hexo 整理到哪里去了，搜也搜不出来，今天直接全目录搜了一下才知道整理到了 OneDrive，服了。最近事情也是特别的多，所以废话少说，开始。\n\n# 文件管理\n\n## Path Finder\n\n这个软件怎么说，算是一个增强版本的访达，右键打开 VSCode，iterm 这硬需求对我还是挺有用的。以及有一个也是在 Win 文件管理器当中看到的一个“打开最近 XX”，也有用。而且 Tags 颜色管理这些基本功能也没少。\n\n## 赤友 NTFS 助手\n\n之前用过比较火的 Paragon NTFS for Mac 和免费的 Mounty for NTFS，前者太贵，后者不好用，所以我也就换成了赤友这个，主要是在淘宝搜注册码那是真的便宜。用起来也还行，就留了下来。\n\n## Free Download Manager\n\n当迅雷下载用，挺香的，可以下载磁力等等\n\n## AriaNg Native\n\n这个就是 NAS 或者服务器啥下载工具用的了，配合 Aria2Pro Docker 版本，挺好用的。\n\n## 360 压缩\n\n360 压缩应该是 360 公司出的最有良心的一款产品了吧。免费 + 没广告挺香的，特别是 Mac 自带压缩后带了一个小文件夹，这个没有这种情况，推荐。\n\n# 终端\n\n## Zsh + iterm2\n\n这个不用我多说，用过都说好，Zsh 最好配上自动补全，高亮提示就差不多了。\n\n# 顶部菜单栏\n\n## Hidden Bar\n\nMac 菜单栏有些不常用的图标，用这个可以隐藏一部分（13.3 寸电脑的痛点）\n\n## iStat Menus\n\nMac 菜单栏上显示 CPU，GPU，温度，内存使用率，网速等等。真香。\n不需要买，在百度搜就有大佬发的注册码。\n\n## [Volta](./Volta.dmg)\n\nMac 笔记本电脑都推荐！省电 + 超频为一体控制工具。国外的工具我给钱了都没给我发注册码，索性用破解版。\n\n## Rectangle\n\nMac 上加强版本分屏工具。\n\n# 学习工具\n\n## Notability\n\n用笔写写画画的笔记本，组会啥的就拿来记录，画思路啥的。代替纸笔嘛 + 保存\n\n## Bob\n\n热键翻译工具 GitHub 开源，看论文必备。香！我使用的是百度翻译的 API 免费。\n\n## MarginNote 3 （IOS + Mac）\n\n看论文做思维导图工具。期末考试三天复习完全不虚。\n这个是阅读输入思维导图工具\n\n## MindNode\n\n思维导图工具，免费就行。现在用来梳理代码啥的。\n这个是文字输出思维导图工具\n\n## Reeder 4（IOS + Mac）\n\nRSS 阅读工具，手机电脑都配一个，个性化定制信息流。\n\n# 其他\n\n## Scroll Reverser\n\nMac 上鼠标与 TouchPad 是一个方向的，但是在用习惯了 win 系列却是反着的。这个软件能区分开鼠标跟 Touchpad 各自使用不同滚动方式，推荐。\n\n## duet\n\n一个 iPad 当副屏的软件。我的黑苹果随航不能用，只能用这个了额。\n\n## IINA\n\n一个免费播放器，支持格式多，可以小窗等等，挺实用的。\n\n## V2rayU\n\nMac 上科学上网工具，这个给我感觉简单，好用。V2ray 协议的。\n"}]